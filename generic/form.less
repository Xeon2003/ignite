@charset "UTF-8";
/* FORM PARTS */

// Prefixes and objects:
// .input
// .label
// .select
// .form-group
// .textarea
// .switch
// .radio
// .check
// .option-group
// .input-group

// Adjustments:

// Padding:
@inputPadding: @defaultPadding;
@inputMargin: @defaultMargin;

// Colors and shadows:
@inputColor: @defaultInputColor;
@inputValidColor: @successColor;
@inputDangerColor: @failColor;
@inputHintColor: @hintColor;
@inputRequiredColor: @mainColor;

@inputShadow: @defaultShadow;
@inputShadowHover: @defaultShadowHover;
@inputShadowColor: @defaultShadowColor;

// Arrows (up and down) in base64:
.arrowsUpDownBg() {
  .inline-svg-code(~'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 137.14286 50" height="50" width="80"><path d="M0 16.429l30-34.286 30 34.286H0zm0 17.142l30 34.286 30-34.286H0z"/></svg>');
  background-image: @-inline-svg-url;
}

// Check symbol in base64:
.checkBg(@color:#000) {
  @code:~'<svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" class="icon"><path fill="@{color}" d="M58.868 13.128l-6.472-6.144-31.649 31.398L7.426 25.703l-6.343 6.276 19.78 18.849z"/></svg>';
  .inline-svg-code(@code);
  background-image: @-inline-svg-url;
}

// Cross symbol (×) in base64:
.crossBg(@color:#000) {
  @code:~'<svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" class="icon"><path fill="@{color}" d="M54.485 11.976l-6.962-6.962L30.115 22.42 12.711 5.014 5.75 11.976l17.404 17.405L5.75 46.786l6.961 6.964 17.404-17.405L47.523 53.75l6.962-6.964L37.08 29.381z"/></svg>';
  .inline-svg-code(@code);
  background-image: @-inline-svg-url;
}

// pen symbol in base64:
.penBg(@color:#000) {
  @code:~'<svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" class="icon"><g><path fill="@{color}" d="M37.285 12.258L6.833 42.822 3.186 56.801l14.158-3.879 30.452-30.565zM49.83 20.294L39.319 10.195 46.291 3.2l10.511 10.097z"/></g></svg>';
  .inline-svg-code(@code);
  background-image: @-inline-svg-url;
}

// Not allowed symbol (crossed circle) in base64:
.not-allowedBg(@color:#000) {
  @code:~'<svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" class="icon"><path fill="@{color}" d="M29.999 1.5C14.285 1.5 1.5 14.285 1.5 29.999 1.5 45.715 14.285 58.5 29.999 58.5 45.715 58.5 58.5 45.715 58.5 29.999 58.5 14.285 45.715 1.5 29.999 1.5zM7.962 29.999c0-12.15 9.887-22.037 22.037-22.037 5.004 0 9.606 1.695 13.309 4.513L12.475 43.307c-2.819-3.703-4.513-8.304-4.513-13.308zm22.037 22.039a21.913 21.913 0 0 1-12.267-3.742l30.564-30.563a21.914 21.914 0 0 1 3.74 12.266c.001 12.151-9.885 22.039-22.037 22.039z"/></svg>';
  .inline-svg-code(@code);
  background-image: @-inline-svg-url;
}

& when (@form=true) {
  /* Input */
  .input {
    .basicInput;
    background-color: @inputColor;
    color: contrast(@inputColor, #222222, #f4f4f4);
    white-space: nowrap;
    text-overflow: ellipsis;
    min-width: 0;
    flex: 1;
    max-width: 100%;
    transition: all .3s ease;
    background-position: 150% center;
    background-size: 15px;
    background-repeat: no-repeat;

    .input-group.is-valid &,
    &.is-valid,
    &[aria-invalid="false"],
    &:valid:not(:placeholder-shown):not([type="password"]) {
      .inputValidation(@inputColor, @inputValidColor, @backgroundImage:true, @cursor:false, @focus:true);
      .checkBg(@color:@inputValidColor);
    }
    .input-group.is-invalid &,
    &.is-invalid,
    &[aria-invalid="true"],
    &:invalid:not(:placeholder-shown) {
      .inputValidation(@inputColor, @inputDangerColor, @backgroundImage:true, @cursor:false, @focus:true);
      .crossBg(@color:@inputDangerColor);
    }
    .input-group.is-recommended &,
    &.is-recommended {
      .inputValidation(@inputColor, @inputHintColor, @backgroundImage:true, @cursor:false, @focus:true);
      .penBg(@color:@inputHintColor)
    }

    &.is-readonly,
    &:read-only,
    &[aria-readonly="true"] {
      .inputValidation(@inputColor, darken(@inputColor, 50%), @cursor:auto);
      .boxShadow(0);
      border-style: dashed;
      border-bottom-style: solid;
    }
    &.is-disabled,
    &:disabled,
    &[aria-disabled="true"] {
      .inputValidation(@inputColor, darken(@inputColor, 15%), @backgroundImage:true, @cursor:not-allowed);
      .not-allowedBg(@color:darken(@inputColor,15%));
      .boxShadow(0);
      border-style: dashed;
    }
    &--contrast {
      background-color: darken(@inputColor, 5%);
      border: @defaultBorderWidth solid darken(@inputColor, 15%);
      color: contrast(darken(@inputColor, 5%), #000000, #ffffff);
    }

    &--small {
      font-size: .8em;
      font-weight: 400;
    }

    &--large {
      font-size: 1.25em;
    }
  }

  // .is-secure mit Schloßsymbol?

  // placeholder text color
  .input::-webkit-input-placeholder {
    color: lighten(contrast(@inputColor, #222222, #f4f4f4), 50%);
    opacity: 1;
  }
  .input:-moz-placeholder {
    color: lighten(contrast(@inputColor, #222222, #f4f4f4), 50%);
    opacity: 1;
  }
  .input::-moz-placeholder {
    color: lighten(contrast(@inputColor, #222222, #f4f4f4), 50%);
    opacity: 1;
  }
  .input:-ms-input-placeholder {
    color: lighten(contrast(@inputColor, #222222, #f4f4f4), 50%);
    opacity: 1;
  }

  /* Label */
  .label {
    .basicInput(@borderColor:darken(@defaultInputColor,12%));
    align-self: flex-start;
    white-space: nowrap;
    background-color: darken(@inputColor, 2%);
    color: contrast(darken(@inputColor, 2%), #000000, #ffffff);
    min-width: 190px;
    .input-group.is-required &,
    &.is-required {
      border-left: @defaultBorderWidth+1px solid @inputRequiredColor;
      color: @inputRequiredColor;
      font-weight: 600;
    }
    .input-group.is-required &:after,
    &.is-required:after {
      content: '\00a0*';
}
    /* #FIXME: remove?
    .input-group.is-invalid &,
    &.is-invalid {
      color: darken(@inputDangerColor, 25%);
      border-color: @inputDangerColor;
      background-color: lighten(@inputDangerColor, 20%);
    }
    */
    .input-group.is-recommended &,
    &.is-recommended {
      color: darken(@inputHintColor, 25%);
      border-color: @inputHintColor;
      background-color: lighten(@inputHintColor, 20%);
    }
    /* #FIXME: remove?
    .input-group.is-valid &,
    &.is-valid {
      color: darken(@inputValidColor, 25%);
      border-color: @inputValidColor;
      background-color: lighten(@inputValidColor, 20%);
    }
    */
    &.is-disabled,
    &:disabled {
      color: #777777;
      cursor: not-allowed;
      .boxShadow(0);
      border: @defaultBorderWidth dashed darken(@inputColor, 20%);
      background-color: darken(@inputColor, 5%);
    }
    .icon {
      margin: 0 .25em 0 -.1em;
    }
    &--small {
      font-size: .8em;
      font-weight: 400;
      min-width: 90px;
    }

    &--block {
      width: 100%;
      margin: 0;
    }
  }

  /* Dropdown */
  .select {
    .basicInput(@borderColor:darken(@defaultInputColor,12%));
    align-self: flex-start;
    max-width: 100%;
    min-width: 0;
    flex: 1 1 auto;
    padding-right: 38px;
    background-color: @inputColor;
    .arrowsUpDownBg(); // arrows (up and down) in svg
    background-size: 20px;
    background-repeat: no-repeat;
    background-position: right center;
    transition: all .3s ease;
    &:hover {
      .boxShadow(@inputShadowHover, @inputShadowColor);
    }
    &.is-disabled,
    &:disabled {
      color: #777777;
      cursor: not-allowed;
      .boxShadow(0);
      border: @defaultBorderWidth dashed darken(@inputColor, 20%);
      background-color: darken(@inputColor, 5%);
    }
    .input-group.is-invalid &,
    &.is-invalid,
    &[aria-invalid="true"] {
      .inputValidation(@inputColor, @inputDangerColor, @focus:true);
    }
    .input-group.is-valid &,
    &.is-valid,
    &[aria-invalid="false"] {
      .inputValidation(@inputColor, @inputValidColor, @focus:true);
    }
    &--small {
      font-size: .8em;
      font-weight: 400;
      background-size: 10px;
    }
  }

  /* Text area */
  .textarea {
    resize: none;
    margin: @inputMargin 0;
    padding: @inputPadding @inputPadding*3.75;
    width: 250px;
    height: 180px;
    background-color: @inputColor;
    border: 1px solid darken(@inputColor, 10%);
    color: contrast(@inputColor, #222222, #f4f4f4);
    transition: all .3s ease;
    background-position: 150% center;
    background-size: 15px;
    background-repeat: no-repeat;
    text-align: left;
    &--block {
      width: 100%;
      margin: 0;
    }
  }

  /* Switch */
  // A simple, yet elegant, boolean switch.
  .switch {
    .basicInput(@borderColor:darken(@defaultInputColor,12%));
    background-color: darken(@inputColor, 2%);
    color: contrast(darken(@inputColor, 2%), #000000, #ffffff);
    &-input {
      display: none;
      &:checked + .switch-label {
        background: lighten(@inputValidColor, 20%);
      }
      &:checked + .switch-label:after {
        left: 50%;
      }
    }
    &-label {
      background: darken(@inputColor, 10%);
      .border-radius(@defaultBorderRadius);
      padding: 2px;
      transition: all .4s ease;
      outline: 0;
      display: block;
      width: 3em;
      height: 1.5em;
      position: relative;
      cursor: pointer;
      user-select: none;
      &:after {
        left: 0;
        position: relative;
        display: block;
        content: "";
        width: 50%;
        height: 100%;
        background: #fff;
        transition: all .2s ease;
        .boxShadow(@inputShadow, @inputShadowColor);
      }
    }
  }

  .tickbox() {
    .basicInput(@padding:0);
    background-color: darken(@inputColor, 2%);
    border: 1px solid darken(@inputColor, 12%);
    color: contrast(darken(@inputColor, 2%), #000000, #ffffff);
    &-input {
      opacity: 0;
      position: absolute;
    }
    &-label {
      position: relative;
      display: block;
      outline: 0;
      cursor: pointer;
      width: 100%;
      &:before {
        content: '';
        background: #fff;
        border: 2px solid darken(@inputColor, 10%);;
        display: inline-block;
        vertical-align: middle;
        width: 1em;
        height: 1em;
        margin-top: -2px;
        text-align: center;
        transition: all .4s ease;
        box-shadow: inset 0 0 0 2px #fff;
      }
      &:not(:empty) {
        padding: @inputPadding @inputPadding*3.75;
        &:before {
          margin-right: 10px;
        }
        &:hover {
          background-color: @inputColor;
        }
      }
    }
    &-input:checked + &-label:before {
      background: lighten(@inputValidColor, 20%);
      border: 2px solid lighten(@inputValidColor, 10%);
    }
  }

  /* Radio button */
  .radio {
    .tickbox();
    &-label {
      &:before {
        border-radius: 50%;
      }
    }
  }

  /* Checkbox */
  .check {
    .tickbox();
  }

  /* Option group */
  // Group radio buttons or checkboxes together for multi-selection lists.
  .option-group {
    display: flex;
    flex-direction: column;
    & .radio,
    & .check {
      width: 100%;
      margin: 0;
      position: relative;
      border-width: 0 @defaultBorderWidth;
      font-weight: 200;
      &:first-child {
        border-width: @defaultBorderWidth;
        border-bottom-width: 0;
      }
      &:last-child {
        border-width: @defaultBorderWidth;
        border-top-width: 0;
      }
      .mq-min(@breakSmall, { width: auto; });
      & .radio-label,
      & .check-label {
        padding: @inputPadding*1.5 @inputPadding*3.75;
        padding-right: 1.75em;
      }
    }
    &--selection-list {
      max-height: 150px;
      overflow-y: auto;
      overflow-x: hidden;
      .radio,
      .check {
        flex: 1 0 auto;
      }
      .radio-label,
      .check-label {
        white-space: nowrap;
        padding-right: 30px;
      }
      .radio:not(:last-child) .radio-label,
      .check:not(:last-child) .check-label {
        border-bottom: @defaultBorderWidth solid darken(@inputColor, 20%);
      }
      .radio-label:before,
      .check-label:before {
        content: none;
      }
      .radio-input:checked + .radio-label,
      .check-input:checked + .check-label {
        background: lighten(@inputValidColor, 20%);
        border-bottom: @defaultBorderWidth solid lighten(@inputValidColor, 10%);
        color: #fff;
        &:hover {
          background-color: lighten(@inputValidColor, 10%);;
        }
      }
    }
  }

  .input,
  .label + .input--block,
  .label + .textarea--block,
  .select,
  .switch,
  .radio {
    .mq-max(@breakSmall, { width: 100%; margin: 0; margin-bottom: 5px; });
  }

  /* Input group */
  // Group buttons, labels and inputs together.
  .input-group {
    display: flex;
    flex-direction: column;
    /*&:not(:last-child) {*/
      margin-bottom: @bottomSpace;
    /*}*/
    & .select,
    & .input,
    & .btn,
    & .switch,
    & .textarea,
    & > .radio,
    & > .check,
    & .option-group {
      .zIndex('content', 0);
      width: 100%;
      margin: 0;
      position: relative;
      .boxShadow(0);
      .mq-max(@breakSmall, { margin-top: -1px; });
      // Bring any button into forefront for proper borders given negative margin below
      &:hover,
      &:active,
      &.is-selected {
        .zIndex('content', 2);
      }
      &:focus {
        .zIndex('content', 3);
      }
      &.is-disabled,
      &.is-disabled:hover {
        .zIndex('content', 0) !important; // stay down!
      }
    }
    & .btn {
      .mq-max(@breakSmall, { margin-top: -1px; });
      .mq-min(@breakSmall, { margin-left: -1px; max-width: 25vw; });
    }
    & .label {
      border-width: 0 @defaultBorderWidth;
      width: 100%;
      margin: 0;
      &:first-child {
        border-width: @defaultBorderWidth;
        border-bottom-width: 0;
      }
      &:last-child {
        border-width: @defaultBorderWidth;
        border-top-width: 0;
      }
    }
    .mq-min(@breakSmall, {
      &:not(.input-group--block) {
        flex-flow: row;
        width: auto;
        margin: @inputMargin 0;
        float: left;
        max-width: 25vw;
        .boxShadow(@inputShadow,@inputShadowColor);
        &:not(:first-child):not(:last-child) {
          border-radius: 0;
        }
        &:first-child:not(:last-child) {
          border-top-right-radius: 0;
          border-bottom-right-radius: 0;
        }
        &:last-child:not(:first-child) {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }
        &:first-child {
          border-width: @defaultBorderWidth;
          border-right-width:0;
        }
        &:last-child {
          border-width: @defaultBorderWidth;
          border-left-width: 0;
        }
      }

      & .select,
      & .input,
      & .btn,
      & .switch,
      & .textarea,
      & > .radio,
      & > .check,
      & .option-group {
        width: auto;
        margin: @inputMargin 0;
        .boxShadow(@inputShadow, @inputShadowColor);
        &:not(:first-child):not(:last-child) {
          border-radius: 0;
        }
        &:first-child:not(:last-child) {
          border-top-right-radius: 0;
          border-bottom-right-radius: 0;
        }
        &:last-child:not(:first-child) {
          border-top-left-radius: 0;
          border-bottom-left-radius: 0;
        }
      }
    });
  }

  /* Form group */
  // Use form-groups to separate different inputs or input-groups.
  .form-group {
    margin-bottom: @bottomSpace;
  }

  .form-group--half {
    .mq-min(@breakMedium, {
      column-count: 2;
      break-inside: avoid;
      column-fill: balance;
      & * {
        break-inside: avoid;
      }
    });
  }
}
